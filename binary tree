#include <iostream>
#include <vector>

template <class T>
class BinaryTree {
private:

    struct Node {
        T value;
        Node* left;
        Node* right;

        Node(T val) : value(val), left(nullptr), right(nullptr) {}
    };

    Node* root;

public:
    BinaryTree() : root(nullptr) {}

    void insert(T value) {
        root = insert(value, root);
    }

    std::vector<T> greater_than(T value) {
        std::vector<T> result;
        greater_than(root, result, value);
        return result;
    }

private:

    void greater_than(Node* node, std::vector<T> &result, T value) {
        if (node == nullptr)
            return;
        if (node->value > value) {
            result.push_back(node->value);
        }
        greater_than(node->left, result, value);
        greater_than(node->right, result, value);
    }

    Node* insert(T value, Node* node) {
        if (node == nullptr) {
            node = new Node(value);
            return node;
        }
        if (value <= node->value) {
            node->left = insert(value, node->left);
        } else {
            node->right = insert(value, node->right);
        }
        return node;
    }
};

int main() {
    BinaryTree<int> tree;
    tree.insert(4);
    tree.insert(3);
    tree.insert(5);
    tree.insert(2);
    tree.insert(6);
    tree.insert(1);

    std::vector<int> result = tree.greater_than(4);

    for (int num : result) {
        std::cout << num << std::endl;
    }
    return 0;
}
